name: Pull Request

on:
  # When a pull request is opened, synchronized, or reopened
  pull_request_target:
    types: ["opened", "synchronize", "reopened"]

  # When a pull request review is submitted, edited, or dismissed
  pull_request_review:
    types: ["submitted", "edited", "dismissed"]

jobs:
  label:
    name: Label
    runs-on: ubuntu-latest

    steps:
      - name: Run script
        uses: actions/github-script@v7
        id: set-result
        with:
          script: |
            // Get the pull request
            const pull_request = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.pull_request.number }},
            });
            console.log("Pull request:", pull_request.data);

            // Get pull request reviews
            const reviews = await github.paginate(github.rest.pulls.listReviews, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_request.data.number,
            });

            // Skip pull request reviews from the author
            const filtered_reviews = reviews.filter((review) => review.user.id !== pull_request.data.user.id);

            // Get the latest review of each user
            const latest_review_by_user = new Map();
            for (const review of filtered_reviews) {
              const previous_review = latest_review_by_user.get(review.user.id);
              if (previous_review == null) {
                latest_review_by_user.set(review.user.id, review);
              } else {
                previous_review_date = Date.parse(previous_review.submitted_at);
                current_review_date = Date.parse(review.submitted_at);
            
                if (current_review_date >= previous_review_date) {
                  latest_review_by_user.set(review.user.id, review);
                }
              }
            }

            // Group pull request reviews by state
            const reviews_by_state = new Map();
            for (const review of latest_review_by_user.values()) {
              const previous_reviews = reviews_by_state.get(review.state) ?? [];
              reviews_by_state.set(review.state, [...previous_reviews, review]);
            }
            const commented_reviews = (reviews_by_state.get("COMMENTED") ?? []).length
            const changes_requested_reviews = (reviews_by_state.get("CHANGES_REQUESTED") ?? []).length
            const approved_reviews = (reviews_by_state.get("APPROVED") ?? []).length
            console.log("Commented reviews:", commented_reviews);
            console.log("Changes requested reviews:", changes_requested_reviews);
            console.log("Approved reviews:", approved_reviews);
            
            // Count unresolved pull request review comments
            let unresolvedReviewComments = 0;
            const query = `query($owner: String!, $repo: String!, $pull_number: Int!, $cursor: String) {
              repository(owner: $owner, name: $repo) {
                pullRequest(number: $pull_number) {
                  reviewThreads(first: 100, after: $cursor) {
                    nodes {
                      id
                      isResolved
                      comments(first: 1) {
                        nodes {
                          author {
                            login
                          }
                        }  
                      }
                    }
                    pageInfo {
                      hasNextPage
                      endCursor
                    }
                  }
                }
              }
            }`;
            let hasNextPage = true;
            let cursor = null;
            while (hasNextPage) {
              const result = await github.graphql(query, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pull_request.data.number,
                cursor: cursor
              })
              console.log("Result:", result);
              for (const reviewThread of result.repository.pullRequest.reviewThreads.nodes) {
                // Skip pull request review comments from the author
                if (reviewThread.comments.nodes[0].author.login === pull_request.data.user.login) {
                  continue;
                }
                
                // Increment the count
                if (!reviewThread.isResolved) {
                  unresolvedReviewComments++;
                }
              }
              hasNextPage = result.repository.pullRequest.reviewThreads.pageInfo.hasNextPage;
              cursor = result.repository.pullRequest.reviewThreads.pageInfo.endCursor;
            }
            console.log("Unresolved review comments:", unresolvedReviewComments);
