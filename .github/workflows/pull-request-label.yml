name: Pull Request - Label

on:
  # When manually triggered
  workflow_dispatch:
    inputs:
      pull_request_number:
        description: Pull request number
        required: true
        type: string

  # When a pull request is opened, reopened or the branch is updated
  pull_request_target:
    types: ["opened", "synchronize", "reopened"]

  # When a pull request review is submitted, edited, or dismissed
  pull_request_review:
    types: ["submitted", "edited", "dismissed"]

permissions:
  pull-requests: write # To be able to update pull request labels

env:
  PULL_REQUEST_NUMBER: ${{ inputs.pull_request_number || github.event.pull_request.number }}
  REQUIRED_REVIEW_APPROVALS: 1
  PENDING_REVIEW_LABEL: "Review: Pending"
  CHANGES_REQUESTED_LABEL: "Review: Changes requested"
  APPROVED_LABEL: "Review: Approved"

jobs:
  label:
    name: Label
    runs-on: ubuntu-latest

    steps:
      - name: Run script
        uses: actions/github-script@v7
        with:
          script: |
            // Get the pull request
            const pull_request = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: process.env.PULL_REQUEST_NUMBER,
            });

            // Skip if the pull request is a draft
            if (pull_request.data.draft) {
              console.log("Skipped pull request because it is a draft.");
              return;
            }

            // Get pull request reviews
            const reviews = await github.paginate(github.rest.pulls.listReviews, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_request.data.number,
            });

            // Get the latest review of each user
            const latest_review_by_user = new Map();
            for (const review of reviews) {
              // Skip reviews from the author
              if (review.user.id === pull_request.data.user.id) {
                continue;
              }

              // Skip "Commented" reviews as they are handled differently
              if (review.state === "COMMENTED") {
                continue;
              }

              // Always keep the latest review
              latest_review_by_user.set(review.user.id, review);
            }

            // Group pull request reviews by state
            const reviews_by_state = new Map();
            for (const review of latest_review_by_user.values()) {
              const previous_reviews = reviews_by_state.get(review.state) ?? [];
              reviews_by_state.set(review.state, [...previous_reviews, review]);
            }
            const approved_reviews = (reviews_by_state.get("APPROVED") ?? []).length
            const changes_requested_reviews = (reviews_by_state.get("CHANGES_REQUESTED") ?? []).length
            console.log("Approved reviews:", approved_reviews);
            console.log("Changes requested reviews:", changes_requested_reviews);

            // Count unresolved pull request review comments
            let unresolved_review_comments = 0;
            const query = `query($owner: String!, $repo: String!, $pull_number: Int!, $cursor: String) {
              repository(owner: $owner, name: $repo) {
                pullRequest(number: $pull_number) {
                  reviewThreads(first: 100, after: $cursor) {
                    nodes {
                      id
                      isResolved
                      comments(first: 1) {
                        nodes {
                          author {
                            login
                          }
                        }  
                      }
                    }
                    pageInfo {
                      hasNextPage
                      endCursor
                    }
                  }
                }
              }
            }`;
            let hasNextPage = true;
            let cursor = null;
            while (hasNextPage) {
              const result = await github.graphql(query, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pull_request.data.number,
                cursor: cursor
              })
              for (const reviewThread of result.repository.pullRequest.reviewThreads.nodes) {
                // Skip review comments from the author
                if (reviewThread.comments.nodes[0].author.login === pull_request.data.user.login) {
                  continue;
                }
                
                // Check the resolve status
                if (!reviewThread.isResolved) {
                  unresolved_review_comments++;
                }
              }
              hasNextPage = result.repository.pullRequest.reviewThreads.pageInfo.hasNextPage;
              cursor = result.repository.pullRequest.reviewThreads.pageInfo.endCursor;
            }
            console.log("Unresolved review comments:", unresolved_review_comments);

            // Get pull request labels
            const labels = await github.paginate(github.rest.issues.listLabelsOnIssue, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pull_request.data.number,
            });
            const labelNames = labels.map((label) => label.name);
            
            if (approved_reviews >= process.env.REQUIRED_REVIEW_APPROVALS && changes_requested_reviews === 0 && unresolved_review_comments === 0) {
               if (labelNames.includes(process.env.PENDING_REVIEW_LABEL)) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pull_request.data.number,
                  name: process.env.PENDING_REVIEW_LABEL,
                });
              }
              if (labelNames.includes(process.env.CHANGES_REQUESTED_LABEL)) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pull_request.data.number,
                  name: process.env.CHANGES_REQUESTED_LABEL,
                });
              }
              if (!labelNames.includes(process.env.APPROVED_LABEL)) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pull_request.data.number,
                  labels: [process.env.APPROVED_LABEL],
                });
              }
            } else if (changes_requested_reviews > 0 || unresolved_review_comments > 0) {
              console.log("Review: Changes requested");
              if (labelNames.includes(process.env.PENDING_REVIEW_LABEL)) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pull_request.data.number,
                  name: process.env.PENDING_REVIEW_LABEL,
                });
              }
              if (!labelNames.includes(process.env.CHANGES_REQUESTED_LABEL)) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pull_request.data.number,
                  labels: [process.env.CHANGES_REQUESTED_LABEL],
                });
              }
              if (labelNames.includes(process.env.APPROVED_LABEL)) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pull_request.data.number,
                  name: process.env.APPROVED_LABEL,
                });
              }
            } else {
              console.log("Review: Pending");
              if (!labelNames.includes(process.env.PENDING_REVIEW_LABEL)) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pull_request.data.number,
                  labels: [process.env.PENDING_REVIEW_LABEL],
                });
              }
              if (labelNames.includes(process.env.CHANGES_REQUESTED_LABEL)) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pull_request.data.number,
                  name: process.env.CHANGES_REQUESTED_LABEL,
                });
              }
              if (labelNames.includes(process.env.APPROVED_LABEL)) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pull_request.data.number,
                  name: process.env.APPROVED_LABEL,
                });
              }
            }
