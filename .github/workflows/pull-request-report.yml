name: Pull Request - Report

on:
  # When manually triggered
  workflow_dispatch:

env:
  PENDING_REVIEW_LABEL: "Review: Pending"
  CHANGES_REQUESTED_LABEL: "Review: Changes requested"
  APPROVED_LABEL: "Review: Approved"

jobs:
  report:
    name: Report
    runs-on: ubuntu-latest

    steps:
      - name: Run script
        uses: actions/github-script@v7
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          script: |
            // Get all pull requests
            const pull_requests = await github.paginate(github.rest.pulls.list, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              sort: "created",
              direction: "asc",
            });
            
            // Find pending pull requests
            const pending_pull_requests = pull_requests.filter((pull_request) => pull_request.labels.some((label) => label.name === process.env.PENDING_REVIEW_LABEL));
            console.log("Pending pull requests:", pending_pull_requests);
            
            // Find changes requested pull requests
            const changes_requested_pull_requests = pull_requests.filter((pull_request) => pull_request.labels.some((label) => label.name === process.env.CHANGES_REQUESTED_LABEL));
            console.log("Changes requested pull requests:", changes_requested_pull_requests);
        
            // Find approved pull requests
            const approved_pull_requests = pull_requests.filter((pull_request) => pull_request.labels.some((label) => label.name === process.env.APPROVED_LABEL));
            console.log("Approved pull requests:", approved_pull_requests);
            
            // Build the Slack message
            const blocks = [];
            blocks.push({
              type: "section",
              text: {
                type: "mrkdwn",
                text: ":loudspeaker: *Code Review Recap* :loudspeaker:"
              }
            });
            blocks.push({
              type: "section",
              text: {
                type: "mrkdwn",
                text: ":eyes: *Pending*"
              }
            });
            const pending_list_items = [];
            for (const pull_request of pending_pull_requests) {
              pending_list_items.push({
                type: "rich_text_section",
                elements: [
                  {
                    type: "link",
                    url: pull_request.html_url,
                    text: pull_request.title + " (#" + pull_request.number + ")",
                  },
                  {
                    "type": "text",
                    "text": " - by "
                  },
                  {
                    type: "link",
                    url: pull_request.user.html_url,
                    text: "@" + pull_request.user.login,
                  },
                ]
              });
            }
            if (pending_pull_requests.length === 0) {
             pending_list_items.push({
                type: "rich_text_section",
                elements: [
                  {
                    type: "text",
                    text: "None",
                  }
                ]
              });
            }
            blocks.push({
              type: "rich_text",
              elements: [
                {
                  type: "rich_text_list",
                  style: "bullet",
                  indent: 0,
                  elements: pending_list_items
                }
              ]
            });
            blocks.push({
              type: "section",
              text: {
                type: "mrkdwn",
                text: ":pencil2: *Changes requested*"
              }
            });
            const changes_requested_list_items = [];
            for (const pull_request of changes_requested_pull_requests) {
              changes_requested_list_items.push({
                type: "rich_text_section",
                elements: [
                  {
                    type: "link",
                    url: pull_request.html_url,
                    text: pull_request.title + " (#" + pull_request.number + ")",
                  },
                  {
                    "type": "text",
                    "text": " - by "
                  },
                  {
                    type: "link",
                    url: pull_request.user.html_url,
                    text: "@" + pull_request.user.login,
                  },
                ]
              });
            }
            if (changes_requested_pull_requests.length === 0) {
             changes_requested_list_items.push({
                type: "rich_text_section",
                elements: [
                  {
                    type: "text",
                    text: "None",
                  }
                ]
              });
            }
            blocks.push({
              type: "rich_text",
              elements: [
                {
                  type: "rich_text_list",
                  style: "bullet",
                  indent: 0,
                  elements: changes_requested_list_items
                }
              ]
            });
            blocks.push({
              type: "section",
              text: {
                type: "mrkdwn",
                text: ":white_check_mark: *Approved*"
              }
            });
            const approved_list_items = [];
            for (const pull_request of approved_pull_requests) {
              approved_list_items.push({
                type: "rich_text_section",
                elements: [
                  {
                    type: "link",
                    url: pull_request.html_url,
                    text: pull_request.title + " (#" + pull_request.number + ")",
                  },
                  {
                    "type": "text",
                    "text": " - by "
                  },
                  {
                    type: "link",
                    url: pull_request.user.html_url,
                    text: "@" + pull_request.user.login,
                  },
                ]
              });
            }
            if (approved_pull_requests.length === 0) {
              approved_list_items.push({
                type: "rich_text_section",
                elements: [
                  {
                    type: "text",
                    text: "None",
                  }
                ]
              });
            }
            blocks.push({
              type: "rich_text",
              elements: [
                {
                  type: "rich_text_list",
                  style: "bullet",
                  indent: 0,
                  elements: approved_list_items
                }
              ]
            });
            
            // Send the Slack message
            fetch(process.env.SLACK_WEBHOOK_URL, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ blocks }),
            })
              .then((response) => {
                if (!response.ok) {
                  throw new Error(`Invalid response: ${response.statusText}`);
                }
                return response.text();
              })
              .then((data) => console.log("Successfully sent the message:", data))
              .catch((error) => console.error("Unable to send the message:", error));
